from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext
import logging

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = "7411990110:AAHctohfQCALjtkH3hG58snG1kaMNns09k4"
updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}
chat_queue = {}

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–∑–º–æ–≤–∏
GENDER, AGE, MENU = range(3)

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
def start(update: Update, context: CallbackContext):
    keyboard = [["üîç –ó–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    update.message.reply_text(
        "–í—ñ—Ç–∞—é! –¶–µ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π —á–∞—Ç. –©–æ–± –ø–æ—á–∞—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≥–µ–Ω–¥–µ—Ä (—á–æ–ª–æ–≤—ñ–∫/–∂—ñ–Ω–∫–∞):",
        reply_markup=reply_markup
    )

    return GENDER

# –ó–±—ñ—Ä –≥–µ–Ω–¥–µ—Ä—É
def set_gender(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data[user_id] = {'gender': update.message.text}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–µ–Ω–¥–µ—Ä

    update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:")
    return AGE

# –ó–±—ñ—Ä –≤—ñ–∫—É
def set_age(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data[user_id]['age'] = update.message.text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–∫

    update.message.reply_text(
        f"–í–∞—à –≥–µ–Ω–¥–µ—Ä: {user_data[user_id]['gender']}, –í–∞—à –≤—ñ–∫: {user_data[user_id]['age']}.\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!",
        reply_markup=ReplyKeyboardMarkup([["üîç –ó–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç"]], resize_keyboard=True)
    )

    return MENU  # –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –º–µ–Ω—é

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—à—É–∫—É —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
def find(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    if user_id not in chat_queue:
        chat_queue[user_id] = None
        update.message.reply_text("–®—É–∫–∞—î–º–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...")
        check_for_match(context)
    else:
        update.message.reply_text("–í–∏ –≤–∂–µ –≤ —á–µ—Ä–∑—ñ –¥–ª—è –ø–æ—à—É–∫—É.")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–∞—Ä–∏ –¥–ª—è —á–∞—Ç—É
def check_for_match(context: CallbackContext):
    if len(chat_queue) >= 2:
        users = list(chat_queue.keys())
        user1, user2 = users[0], users[1]

        user1_info = user_data[user1]
        user2_info = user_data[user2]

        context.bot.send_message(user1, f"–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–æ—á–∏–Ω–∞–π—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n–í–∞—à –≥–µ–Ω–¥–µ—Ä: {user1_info['gender']}, –í–∞—à –≤—ñ–∫: {user1_info['age']}.")
        context.bot.send_message(user2, f"–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–æ—á–∏–Ω–∞–π—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n–í–∞—à –≥–µ–Ω–¥–µ—Ä: {user2_info['gender']}, –í–∞—à –≤—ñ–∫: {user2_info['age']}.")

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∏
        chat_queue[user1] = user2
        chat_queue[user2] = user1

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –º—ñ–∂ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞–º–∏
def message_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in chat_queue and chat_queue[user_id] is not None:
        partner_id = chat_queue[user_id]
        context.bot.send_message(partner_id, update.message.text)

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É
def end_chat(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in chat_queue:
        partner_id = chat_queue[user_id]
        context.bot.send_message(partner_id, "–í–∞—à —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç.")
        context.bot.send_message(user_id, "–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
        del chat_queue[user_id]
        if partner_id:
            del chat_queue[partner_id]

        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É
        update.message.reply_text("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.",
                                  reply_markup=ReplyKeyboardMarkup([["üîç –ó–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç"]], resize_keyboard=True))

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        GENDER: [MessageHandler(Filters.text, set_gender)],
        AGE: [MessageHandler(Filters.text, set_age)],
        MENU: [MessageHandler(Filters.regex("üîç –ó–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞"), find),
               MessageHandler(Filters.regex("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç"), end_chat)]
    },
    fallbacks=[]
)

dispatcher.add_handler(conv_handler)
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, message_handler))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    updater.start_polling()
    updater.idle()
